"use strict";
var is_not_string_1 = require("./lib/is-not-string");
var subscription_args_invalid_1 = require("./lib/subscription-args-invalid");
var broadcast_1 = require("./lib/broadcast");
var package_payload_1 = require("./lib/package-payload");
var constants_1 = require("./lib/constants");
module.exports = /** @class */ (function () {
    function Framebus(origin) {
        if (origin === void 0) { origin = "*"; }
        this.origin = origin;
    }
    Framebus.target = function (origin) {
        if (origin === void 0) { origin = "*"; }
        return new Framebus(origin);
    };
    Framebus.prototype.include = function (childWindow) {
        if (childWindow == null) {
            return false;
        }
        if (childWindow.Window == null) {
            return false;
        }
        if (childWindow.constructor !== childWindow.Window) {
            return false;
        }
        constants_1.childWindows.push(childWindow);
        return true;
    };
    Framebus.prototype.target = function (origin) {
        return Framebus.target(origin);
    };
    Framebus.prototype.emit = function (event, data, reply) {
        var origin = this.origin;
        if (is_not_string_1.isntString(event)) {
            return false;
        }
        if (is_not_string_1.isntString(origin)) {
            return false;
        }
        if (typeof data === "function") {
            reply = data;
            data = undefined; // eslint-disable-line no-undefined
        }
        var payload = package_payload_1.packagePayload(event, origin, data, reply);
        if (!payload) {
            return false;
        }
        broadcast_1.broadcast(window.top || window.self, payload, origin);
        return true;
    };
    Framebus.prototype.on = function (event, fn) {
        var origin = this.origin;
        if (subscription_args_invalid_1.subscriptionArgsInvalid(event, fn, origin)) {
            return false;
        }
        constants_1.subscribers[origin] = constants_1.subscribers[origin] || {};
        constants_1.subscribers[origin][event] = constants_1.subscribers[origin][event] || [];
        constants_1.subscribers[origin][event].push(fn);
        return true;
    };
    Framebus.prototype.off = function (event, fn) {
        var origin = this.origin;
        if (subscription_args_invalid_1.subscriptionArgsInvalid(event, fn, origin)) {
            return false;
        }
        var subscriberList = constants_1.subscribers[origin] && constants_1.subscribers[origin][event];
        if (!subscriberList) {
            return false;
        }
        for (var i = 0; i < subscriberList.length; i++) {
            if (subscriberList[i] === fn) {
                subscriberList.splice(i, 1);
                return true;
            }
        }
        return false;
    };
    return Framebus;
}());
